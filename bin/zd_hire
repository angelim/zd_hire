#!/usr/bin/env ruby

require "bundler/setup"
require "zd_hire"
require 'commander/import'
require 'octokit'

program :name, 'ZdHire'
program :version, ZdHire::VERSION
program :description, 'Hire developers using Github'
default_command :init

QUESTIONS = {
  repo: 'Github Repository(user/repo): ',
  issues: 'Github Issue Ids: ',
  target_repo: 'New repository name: '
}

PRIVATE_SECTION_SEPARATOR = '## PRIVATE'
EVALUATION_SEPARATOR = '## EVALUATION'
DEFAULT_ISSUE_LABEL = 'default_issue'
POSITION_LEVEL_LABELS = %w{
  software_engineer
  senior_software_engineer
  staff_engineer
  senior_staff_engineer
}

def token_validator
  ->(token) {
    @client = Octokit::Client.new(access_token: token)
    @client.user rescue false
  }
end

def origin_validator
  ->(repo) {
    return false if repo !~ /\w+\/\w+/
    github.repo(repo) rescue false
  }
end

def target_validator
  ->(target) { target != config.origin_repo }
end

def local_origin_validator
  ->(path) { File.directory?(File.expand_path(path)) }
end

def config
  @config ||= ZdHire::Config.new  
end

def github
  @client ||= Octokit::Client.new(access_token: config.github_token)
end

command :init do |c|
  c.syntax = 'zd_hire init'
  c.description = 'Configures ZdHire'
  c.action do |args, options|
    if config.valid?
      say "Current Configuration: #{config.attributes}"
      if agree('Would you like to exit initialization?(y/n) ', true)
        exit
      end
    end
    say 'Initializing Configuration'

    if agree('Would you like to create a new Github access token?(y/n) ', true)
      system "open https://github.com/settings/tokens"
    end

    config.github_token = ask("Github access token(needs repo, read:org and read:user scopes): ") do |q|
      q.validate = token_validator
      q.responses.merge!(not_valid: "Couldn't connect to github with token. Try again.")
    end

    config.origin_repo = ask("Origin Github Repository(username/repo): ") do |q|
      q.validate = origin_validator
      q.responses.merge!(not_valid: "Couldn't retrieve repository with credentials. Use the format 'username/repo'")
    end

    config.local_path = ask("Local repository path: ") do |q|
      q.validate = local_origin_validator
      q.responses.merge!(not_valid: "Couldn't find repo path in local filesystem. E.g (~/Code/myrepo)")
    end

    config.branch = ask("Default branch to export: ") { |q| q.default = 'master' }
    config.serialize_to_file
  end
end

command :clone do |c|
  c.syntax = 'zd_hire clone REPOSITORY NAME'
  c.description = 'Sets up repository for candidate'
  c.option '--custom', TrueClass, 'Whether should run in custom mode'
  c.option '--verbose', TrueClass, 'Whether should run in verbose mode'
  c.action do |args, options|
    $custom = options.custom
    $verbose = options.verbose

    if config.valid?
      target = args.first || ask(QUESTIONS[:target_repo]) do |q|
        q.validate = target_validator
        q.responses.merge!(not_valid: "Target and origin repositories can't be the same")
      end
      clone_repository(config.origin_repo, target)
    else
      say 'Run `zd_hire init` to configure github keys'
    end
    agree_if_custom('Would you like to create a Github Project?(y/n) ', true) do
      create_project(target)
    end
  end
end

def create_pr(new_repo)
  say "Copying Pull Request..."
  origin_pull_requests.each {|pr| say "[#{pr.number}] #{pr.head.ref}: #{pr.title}" }
  pr_number = ask('Which Pull Request? [The branch must also be available locally] ')
  selected = origin_pull_requests.detect {|pr| pr.number.to_i == pr_number.to_i }
  exit unless selected
  branch = selected.head.ref
  command = [
    "cd #{new_repo.name}",
    "git checkout -b #{branch}",
    "git pull #{config.local_path} #{branch} --no-edit",
    "git push origin #{branch}"
  ].join(' && ')
  
  say "Pulling from local branch..."
  execute(command, wait_response: true)
  sleep 1
  say "Creating PR in target repository..."
  github.create_pull_request(new_repo.full_name, 'master', branch, selected.title, selected.body)
end

def origin_default_issue
  @df ||= origin_repo_issues.detect{ |issue| has_label?(issue, DEFAULT_ISSUE_LABEL) }
end

def issues_by_label(label)
  origin_repo_issues.select { |issue| has_label?(issue, label) }
end

def has_label?(issue, label)
  issue.labels.any? { |l| l.name == label }
end

def evaluation_items(issue)
  return [] unless issue
  evaluation_text = issue.body.split(EVALUATION_SEPARATOR).last
  evaluation_items = evaluation_text.lines.map(&:chomp)
  evaluation_items.delete('')
  evaluation_items
end

def evaluation_item_report(issue)
  default_items = evaluation_items(origin_default_issue)
  issue_type = issue.title.match(/\[(\w+)\]/)[1] rescue issue.number
  issue_items = evaluation_items(issue)
  (issue_items + default_items).compact.map { |item| [issue_type, item].join(', ') }
end

def presentable_issues
  @presentable ||= origin_repo_issues.reject do |issue|
    issue.number.to_i == origin_default_issue&.number&.to_i
  end
end

def origin_repo_issues(options = {})
  @rp ||= github.issues(config.origin_repo, options).reject(&:pull_request)
end

def origin_pull_requests
  @prs ||= github.pull_requests(config.origin_repo)
end

def copy_issues(target)
  selected_issues = $custom ? pick_issues : issues_for_position
  say "Copying issues..."
  selected_issues.each { |issue| copy_issue(target, issue) }

  report_issues(selected_issues) if $custom
end

def pick_issues
  issues = presentable_issues
  issues.each { |i| say "#{i.number}: #{i.title}" }
  issue_ids = ask('Type Issue IDs separated by spaces: ', Array).map(&:to_i)
  issues.select do |issue|
    issue_ids.include?(issue.number.to_i)
  end
end

def issues_for_position
  position = choose("Which Position? \n") do |menu|
    menu.choices(*POSITION_LEVEL_LABELS)
  end
  issues_by_label(position)
end

def report_issues(issues)
  say "Reporting issues..."
  issues.each { |issue| puts evaluation_item_report(issue) }
end

def copy_issue(target, issue)
  public_body, private_section = issue.body.split(PRIVATE_SECTION_SEPARATOR)
  unless private_section
    unless agree("[issue #{issue.number}] Could not identify a private section. Issue may be malformatted. Want to copy anyway?(y/n) ", true)
      return
    end
  end
  github.create_issue(target, issue.title, public_body)
end

def clone_repository(origin, target)
  say "Cloning repository..."
  command = [
    "git clone git@github.com:#{origin}.git -b master --single-branch #{target}",
  ].join(' && ')
  
  execute(command)
end

def setup_remote(target_dir, remote_repo)
  say "Setting up remote..."
  command = [
    "cd #{target_dir}",
    "git remote set-url origin #{remote_repo.ssh_url}",
    'git push -u origin master'
  ].join(' && ')
  
  execute(command)
end

def create_project(target)
  user = github.user.login
  organization = choose("Which Github Organization? \n") do |menu|
    menu.choices(*([user] + github.organizations.map(&:login)))
    menu.default = user
  end
  project_name = ask_if_custom('Project name? ', target)
  attrs = repo_attributes
  attrs[:organization] = organization unless user == organization
  attrs[:private] = agree('Private repository [Requires paid Github Account]?(y/n) ', true)

  begin
    say "Creating Github project..."
    new_repo = github.create_repository(project_name, attrs)

    agree_if_custom("Would you like setup the local repo?(y/n) ", true) do
      setup_remote(target, new_repo)
    end

    agree_if_custom("Would you like to select issues to copy(y/n) ", true) do
      copy_issues(new_repo.full_name)
    end

    agree_if_custom("Would you like to copy a Pull Request(y/n) ", true) do
      create_pr(new_repo)
    end

    agree_if_custom('Would you like to open the project in your browser?(y/n) ', true) do
      system "open #{new_repo.html_url}"
    end
  rescue => e
    say "The repository could not be created: #{e.message}"
  end
end

def execute(command, wait_response: false)
  say(command) if $verbose
  wait_response ? `#{command}` : system(command)
end

def ask_if_custom(question, default)
  if $custom
    ask(question) {|q| q.default = default }
  else
    default
  end
end

def agree_if_custom(*args, &block)
  raise LocalJumpError unless block_given? 
  if $custom
    yield if agree(*args)
  else
    yield
  end
end

def repo_attributes
  {
    has_issues: true,
    has_wiki: false
  }
end